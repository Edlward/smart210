/*************************** 动静态函数库 **************************/

.so 是动态函数库,.a是静态函数库,

linux 下编译链接默认为动态函数库.如果使用静态库链接,使用编译选项 -static: gcc -static test.c -o test  (-o 指定输出文件名字test)
如果编译时出现错误: cannot find -lc 指没有发现libc.a, l为lib简写

reedeld -d xxx 读出xxx使用了那些静态函数库

制作静态函数库:
gcc -c aaa.c -o aaa.o	编译出aaa.o执行文件
ar cqs libmylib.a aaa.0	打包到静态库 libmylib.a
拷贝 到 系统库目录 /usr/lib 里

gcc -static test.c -o test	相当于 gcc -static test.c -lc -o test	默认情况 编译只链接到静态c库, 
要使用别的静态态库,则要明确指出: gcc -static test.c -lmylib -o test	

gcc test.c -o test	相当于 gcc test.c -lc -o test	默认情况 编译只链接到动态c库, 
要使用别的动态态库,则要明确指出: gcc test.c -lmylib -o test	

制作动态函数库:
gcc -c aaa.c -o aaa.o	编译出aaa.o执行文件
gcc -shared -fPIC aaa.0	libmylib.so 打包到动态库 libmylib.so (-fPIC表示输出对象模块是按照可重定位地址方式生成的)
拷贝 到 系统库目录 /usr/lib 里

/*************************** 系统调用_文件编程 **************************/
见file_ops例子
这里使用的是linux 系统调用的函数操作.

/*************************** 库函数_文件编程 **************************/
见libc_file_ops例子
这里使用c函数库操作,方便,window inux 移植
函数先打开并操作一个流,并不是直接操作文件.

/*************************** 时间编程 **************************/
见time例子

/*************************** 进程 控制 编程 **************************/
临界区:一般指,每时每刻只允许一个进程或线程执行的代码段
进程同步:一组进程按照一定顺序执行,不允许后执行的先执行发生 
调度算法:先来先服务,短进程优先,高优先级优先,时间片轮转

/*************************** 无名管道 pipe**************************/
数据传输:无名管道pipe,有名管道FIFO,
资源共享:信号量
事件通知:信号(signal)
IPC(interprocess communication):unix进程间通信, 
				system V, 
				prosix(portable operating system interface)可移植,不局限于linux,可window 

pipe特点:
进程读空管道时进程阻塞,进程写满管道时进程阻塞,管道容量64kb
管道单向意思:只能从fd[1]写入数据,从fd[0]读出数据.
见pipe例子

fifo 特点:
同一时间,至少1个以O_WRONLY模式打开fifo,至少1个以O_RDONLY模式打开fifo,
如果进程都以同一个模式打开,那么都进程都被阻塞在打开函数里.
见fifo例子

注意给管道写入NULL,也算写入了一个字节,管道有一个实时计数器统计此时此刻的字节数量


/*************************** 信号(signal) **************************/
见signal例子.

/*************************** 信号量 permission denied 未解决 **************************/
信号量semaphore,见例子semaphore例子:现在主要出现了操作信号量时,permission denied 未解决

信号量属于ipc的一种

关于键值:
每个ipc都有一个键值,进程通过键值找到信号量并访问,
由于键值对于每个IPC都是唯一的,键值的生成很讲究,如果自己任意指定一个数作为键值,说不定已经被用了,而出现冲突,
所以,有巧妙的生成可用键值的方法:
	ftok(文件名,项目id),
	每个存在硬盘里的文件都有一个标识的唯一的文件名id号,
	文件名id号 + 项目id号 = 一个键值
	每个执行于同一个项目的进程,都要访问同一个文件时,都容易找到访问同一个键值里的IPC信息

现在主要出现了操作信号量时,permission denied 未解决




















































