
etc目录:
fstab: 指明执行mount -a时需要挂载的文件系统
group:
inittab: busybox 的 init 进程配置文件
shadow: 使用 passwd 命令创建密码时需要这文件参与
passwd: 密码文件
profile: 用户环境配置文件
hostname: 记录系统主机名,出现在提示符@之后, 这个文件可以没用
mdev.conf: mdev 的配置文件, 这个文件可以没用
resolv.conf: 存放DNS信息,访问网络需要
init.d目录: 启动文件目录,目录下有个rcS文件,存放了 系统启动时配置 及自启动加载的进程等
rc.d目录: 一些自启动所需要脚本
sysconfig目录: 存放系统配置信息的一些文件,还有一些执行配置文件的脚本,如 ip, mac, gw写在配置文件,由目录下的脚本执行

libc目录:
放着动态库文件.

/*************************** inittab **********************************/

编译安装后生成 linuxrc 这个链接就是连接到 busybox 程序,linux启动后会先执行linuxrc 也就是busybox程序

而 busybox 会先执行 busybox init 这个进程 

busybox init 源码在 busybox 源码目录的init/init.c

busybox init 先设置信号处理函数 -> 初始化控制台 -> 解析inittab文本并执行.

inittab: busybox 的 init 进程在初始化系统时会去解析的一个文件,该文件,每行条目,代表一个子进程,格式如下:
	<id>:<runlevel>:<actions>:<process>
	id: 表示该进程要使用的控制台(即标准输入,标准输出,标准错误设备),不填,表示与init一样的控制台
	runlevels: 没有太大意义,可省略
	action: 表示 init 如何操作这个子进程
	process: 要执行的程序文件,或者脚本的 shell格式的路径指令
	
	<action>的选项的内容
	sysinit: busybox init 后最先执行的内容,只执行一次,结束后,busybox init 再执行其他
	wait: 执行完sysinit后,busybox init才执行,只执行一次,结束后,busybox init 再执行其他
	once: 执行完   wait后,busybox init才执行,只执行一次,busybox init 并不等待这个子进程结束,busybox init 可能同时继续执行其他
	raspawn: 启动了   once后,busybox init就启动这个, 以后,当 busybox init 检测到这个子进程退出时,会重新启动它
	askfirst:启动了raspawn后,busybox init就启动这个, 与 raspawn 类似,但 busybox init 先输出:"please press enter to active this console "
									等用户输入回车后再启动子进程
	shutdown: 当系统关机时,即重启/关闭系统命令时,启动
	ctrlaltdel: 当 ctrl+alt+del 按下后,启动		

	另外: #是注释符!!
例子:
# rcS 是一脚本
::sysinit:/etc/init.d/rcS		
# Note below that we prefix the shell commands with a "-" to indicate to the
# sh 是shell解析程序 shell通过解释用户输入的命令在指定的bin目录找到对应的程序并执行
::askfirst:-/bin/sh
# reboot是重启命令程序
::ctrlaltdel:/sbin/reboot
# umount命令程序 及其参数
::shutdown:/bin/umount -a –r

/*************************** initramfs **********************************/
内核启动完成后,执行文件系统的 linnuxrc 后者 init 作为第一个程序, 继续机器进一步的初始化,
然而,linnuxrc存放在一些物理介质的一盘里,要访问硬盘,先执行硬盘驱动初始化,初始化文件系统,
然而,硬盘驱动初始化一般又是linnuxrc里的内容!! 这就矛盾了
linux对于这个问题解决方法是,先挂载一个ram内存的文件系统,然后在这里linuxrc执行硬盘驱动初始化,然后在转换到这个新的文件文件系统去
为什么不直接在内核启时,执行硬盘驱动初始化,然后挂载文件系统,然后,在执行linuxrc,而是另外先出挂载ramfs,在ramfs里完成银盘初始化?
普遍认为,把这些更纯粹的无关紧要的底层硬件初始化 与 内核初始化明显分开,把他们放到文件系统里完成,这样维护内核更方便,更有效率
所以,当然也用直接在内核初始化硬盘,不通过ramfs来执行的个例出现.
除了用于初始化硬盘外,ramfs 还是有很多重要用途的.
内核与ramfs是连个相互独立的内容,但是,若选择使用ramfs的话,编译出来的 zImage 里有一部分是 ramfs 的内容包




















