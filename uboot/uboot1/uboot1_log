一不留神删了一个月的成果,很多有价值的笔记丢失,现在着重各种备份
重新编译一次,只记下重要内容:

版本u-boot-2014.04

/*************************** uboot 与相关linux 基础 **********************************/

内核编译后 得的 uImage 与 zImage 的区别:
	uImage 只是比 zImage 多了一个 0x40 大小的头, 越过这个头,执行uImage的内容与执行zImage没有区别.

编译好的linux内核包括:cpu板级的硬件初始化内容,还有linux自身内核内容vmlinux,

bzImage 与 zImage 功能格式框架属性,压缩属性是一样的,不过bzImage表示是大型的zImage,表示包含更多内容的内核

vmlinuz (注意最后字母是Z), 其实就是 zImage 或者是 bzImage



/*************************** uboot流程 **********************************/

spl:
/arch/arm/cpu/armv7/start.S:reset
	->save_boot_params	//保存启动参数
	->关 FIQ and IRQ 中断,转到 svc 模式
	-> cpu_init_cp15	//操作cp15协处理器,关mmu cache之类操作
	-> cpu_init_crit	//跳到board/samsung/smart210/lowlevel_init.S:lowlevel_init
		->clock_init	/* 时钟初始化 c程序 */	spl便可以执行c程序,是因为svc模式下,有一默认的栈区在 ISRAM 里
		->ddr_init	/* DDR初始化  c程序 */
	->_main		//跳到arch/arm/lib/crt0.S
		-> copy_bl2_to_ram	/* 拷贝BL2到DDR */
		-> 跳转到DDR的起始地址执行BL2

uboot:
/arch/arm/cpu/armv7/start.S:reset
	->save_boot_params	//保存启动参数
	->关 FIQ and IRQ 中断,转到 svc 模式
	-> cpu_init_cp15	//操作cp15协处理器,关mmu cache之类操作
	-> cpu_init_crit	//跳到board/samsung/smart210/lowlevel_init.S:lowlevel_init 这里不作为,直接返回
	->_main		//跳到arch/arm/lib/crt0.S
		->为global_data留空间,把global_data始地址给r9寄存器,把栈设在
		->board_init_f	//执行板子板子的基本初始化,搜集板子的global_data信息
		->重定位操作
		->board_ init_r	//更高级别的初始化任务,不再返回


/*************************** 配置 spl: 成功 **********************************/

顶层目录下的 boards.cfg 中添加自己的单板的硬件配置信息,仿照 smdkc100:
Active arm armv7 s5pc1xx samsung smart210 smart210 - kingders <418128064@qq.com>

board 目录下创建一个用于存储单板相关代码文件的目录board/samsung/smart210
修改对应Makefile:obj-y	:= smart210.o

直接修改主目录 Makefile,添加一行 CROSS_COMPILE ?= arm-linux-

为自己的单板创建配置文件 include/configs/smart210.h 添加宏:
#define CONFIG_SPL 

arch/arm/include/asm/arch-s5pc1xx/cpu.h 中
添加与 S5PV210 相关的寄存器定义
#define S5PV210_PRO_ID		0xE0000000
#define S5PV210_CLOCK_BASE	0xE0100000
#define S5PV210_GPIO_BASE	0xE0200000
#define S5PV210_PWMTIMER_BASE	0xE2500000
#define S5PV210_WATCHDOG_BASE	0xE2700000
#define S5PV210_UART_BASE	0xE2900000
#define S5PV210_SROMC_BASE	0xE8000000
#define S5PV210_MMC_BASE	0xEB000000
#define S5PV210_DMC0_BASE	0xF0000000
#define S5PV210_DMC1_BASE	0xF1400000
#define S5PV210_VIC0_BASE	0xF2000000
#define S5PV210_VIC1_BASE	0xF2100000
#define S5PV210_VIC2_BASE	0xF2200000
#define S5PV210_VIC3_BASE	0xF2300000
#define S5PV210_NAND_BASE	0xB0E00000
#define S5PV210_LCD_BASE	0xF8000000
修改samsung base 宏:
#define SAMSUNG_BASE(device, base)				\
static inline unsigned int samsung_get_base_##device(void)	\
{									\
	return S5PV210_##base;		\
}
添加宏项目:
SAMSUNG_BASE(clock, CLOCK_BASE)
SAMSUNG_BASE(dmc0, DMC0_BASE)
SAMSUNG_BASE(dmc1, DMC1_BASE)

修改 board/samsung/smart210/lowlevel_init.S 添加:
#ifdef CONFIG_SPL_BUILD
	bl clock_init		/* 时钟初始化 */
	bl ddr_init		/* DDR初始化 */
#endif

在board/samsung/smart210/smart210.c	
添加头文件 :
#include <asm/arch/clock.h>		/* add by zjh */
#include <asm/arch/dmc.h>		/* add by zjh */
实现clock_init ddr_init 定义

/arch/arm/include/asm/arch-s5pc1xx/clock.h 中添加 S5PV210 的时钟相关寄存器的定义
struct s5pv210_clock {
	unsigned int	apll_lock;
	unsigned char	res1[0x04];
	unsigned int	mpll_lock;
	unsigned char	res2[0x04];
	unsigned int	epll_lock;
	unsigned char	res3[0x0C];
	unsigned int	vpll_lock;
	unsigned char	res4[0xdc];
	unsigned int	apll_con0;
	unsigned int	apll_con1;
	unsigned int	mpll_con;
	unsigned char	res5[0x04];
	unsigned int	epll_con0;
	unsigned int	epll_con1;
	unsigned char	res6[0x08];
	unsigned int	vpll_con;
	unsigned char	res7[0xdc];
	unsigned int	src0;
	unsigned int	src1;
	unsigned int	src2;
	unsigned int	src3;
	unsigned int	src4;
	unsigned int	src5;
	unsigned int	src6;
	unsigned char	res8[0x64];
	unsigned int	mask0;
	unsigned int	mask1;
	unsigned char	res9[0x78];
	unsigned int	div0;
	unsigned int	div1;
	unsigned int	div2;
	unsigned int	div3;
	unsigned int	div4;
	unsigned int	div5;
	unsigned int	div6;
	unsigned int	div7;
};

编写/arch/arm/include/asm/arch-s5pc1xx/dmc.h
struct s5pv210_dmc0 {
	unsigned int	concontrol;
	unsigned int	memcontrol;
	unsigned int	memconfig0;
	unsigned int	memconfig1;
	unsigned int	directcmd;
	unsigned int	prechconfig;
	unsigned int	phycontrol0;
	unsigned int	phycontrol1;
	unsigned char	res1[0x08];
	unsigned int	pwrdnconfig;
	unsigned char	res2[0x04];
	unsigned int	timingaref;
	unsigned int	timingrow;
	unsigned int	timingdata;
	unsigned int	timingpower;
	unsigned int	phystatus;
	unsigned int	chip0status;
	unsigned int	chip1status;
	unsigned int	arefstatus;
	unsigned int	mrstatus;
	unsigned int	phytest0;
	unsigned int	phytest1;
};
struct s5pv210_dmc1 {
	unsigned int	concontrol;
	unsigned int	memcontrol;
	unsigned int	memconfig0;
	unsigned int	memconfig1;
	unsigned int	directcmd;
	unsigned int	prechconfig;
	unsigned int	phycontrol0;
	unsigned int	phycontrol1;
	unsigned char	res1[0x08];
	unsigned int	pwrdnconfig;
	unsigned char	res2[0x04];
	unsigned int	timingaref;
	unsigned int	timingrow;
	unsigned int	timingdata;
	unsigned int	timingpower;
	unsigned int	phystatus;
	unsigned int	chip0status;
	unsigned int	chip1status;
	unsigned int	arefstatus;
	unsigned int	mrstatus;
	unsigned int	phytest0;
	unsigned int	phytest1;
};

/arch/arm/lib/crt0.S 修改,
#if !defined(CONFIG_SPL_BUILD)			//在spl里不用另外设置栈sp
	ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
	bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
	sub	sp, sp, #GD_SIZE	/* allocate one GD above SP */
	bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
	mov	r9, sp		/* GD is above SP */
	mov	r0, #0
#endif
	/* modied by zjh */
#ifdef CONFIG_SPL_BUILD
	bl copy_bl2_to_ram			/* 拷贝BL2到DDR */
	ldr pc, =CONFIG_SYS_SDRAM_BASE		/* 跳转到DDR的起始地址执行BL2 */
#else
	bl	board_init_f
#endif

添加制作头工具,因为s5pv210要求一个16字节的头!!
从嵌入笔记裸机程序拷入addheader.c,
gcc addheader.c -o mk210 制作头工具
把 mk210 放入tools
修改spl/Makefile:
$(obj)/$(BOARD)-spl.bin: $(obj)/u-boot-spl.bin
	$(if $(wildcard $(objtree)/spl/board/samsung/$(BOARD)/tools/mk$(BOARD)spl),\
	$(objtree)/spl/board/samsung/$(BOARD)/tools/mk$(BOARD)spl,\
	$(objtree)/tools/mk210) $(VAR_SIZE_PARAM) $< $@		//把加头工具改为mk210

mkae smart210_config
make spl/u-boot-spl.bin -j4
log:
  GEN     include/autoconf.mk.dep
  GEN     include/autoconf.mk
cc1: error: bad value (armv5) for -march= switch
cc1: error: bad value (armv5) for -march= switch
  CHK     include/config/uboot.release
  CHK     include/generated/timestamp_autogenerated.h
  UPD     include/generated/timestamp_autogenerated.h
  HOSTCC  scripts/basic/fixdep
  UPD     include/config/uboot.release
  CHK     include/generated/version_autogenerated.h
  UPD     include/generated/version_autogenerated.h
  CC      lib/asm-offsets.s
  CC      arch/arm/lib/asm-offsets.s
arch/arm/lib/asm-offsets.c:1:0: error: bad value (armv5) for -march= switch
lib/asm-offsets.c:1:0: error: bad value (armv5) for -march= switch
make[1]: *** [arch/arm/lib/asm-offsets.s] Error 1
make[1]: *** Waiting for unfinished jobs....
make[1]: *** [lib/asm-offsets.s] Error 1
make: *** [prepare0] Error 2
出错原因!!!!!主目录 Makefile 设置CROSS_COMPILE不正确
不应该修改原来的这个地方!!!
ifeq ($(HOSTARCH),$(ARCH))
CROSS_COMPILE ?= 
endif
而是在# Make variables (CC, etc...)下添加
# add by zjh
CROSS_COMPILE = arm-linux-
最后成功编译

写入sd卡seek=1 位置		//误删导致对dd命令的笔记也没了,尼玛 
sudo dd bs=512 iflag=dsync oflag=dsync if=spl/smart210-spl.bin of=/dev/sdb seek=1 //注意u-boot-spl.bin是还没有写头的spl
//印象中dd命令是 把if路径的文件的内容,写入到of路径文件的 第seek块始的位置
sudo dd bs=512 iflag=dsync oflag=dsync if=/tftpboot/lcd.bin of=/dev/sdb seek=32		//放入测试文件,成功!!
//注意这个测试文件只能串口成功,lcd并没有点亮,由于lcd为源的友善一线触摸屏设备


/******************************** uboot 内存布局 重定位 global_data 成功 *****************************************/

内村布局主要从crt0.s的_main开始:
先把栈设置到内存最高地址
栈八字节对齐.
栈前移一段地址,留出一块GD_SIZE大小空间给 global_data	
	//GD_SIZE 在 u-boot-2014.04/include/generated/generic-asm-offsets.h 中定义,其值为 168
栈八字节对齐
把现时的栈地址给r9,这个地址就是global_data的基地址
然后board_init_f,各种初始化和初始化化global_data
	->首先定义了几个重要的变量:add 最终为重定位地址,
				addr_sp 为最终的用户栈指针地址。
	->初始化gd(global_data)内容
		->gd->mon_len = (ulong)&__bss_end - (ulong)_start;	//这里计算了uboot大小并存到mon_len
	->依次调用数组 init_sequence 中的每个函数,进行一系列初始化操作	//这里就是用到绝对寻址方式
	->最后重新布局了重定位后内存空间分布
然后返回到_main开始重定位:
	ldr	sp, [r9, #GD_START_ADDR_SP]	/* sp = gd->start_addr_sp */
	bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
	ldr	r9, [r9, #GD_BD]		/* r9 = gd->bd */
	sub	r9, r9, #GD_SIZE		/* new GD is below bd */

	adr	lr, here
	ldr	r0, [r9, #GD_RELOC_OFF]		/* r0 = gd->reloc_off 主意reloc_off是现定位和重定位后的相对位置值*/
	add	lr, lr, r0
	ldr	r0, [r9, #GD_RELOCADDR]		/* r0 = gd->relocaddr */
	//标号 here 的相对地址赋值给 lr,然后将 lr 减去将要重定位的地址相对 u-boot 当前地址的偏移,
	//结果是 lr 保存了 u-boot 重定位后的here的地址
	b	relocate_code		//开始重定位
	//r9 即 gd,其中 GD_START_ADDR_SP、GD_BD、GD_SIZE、GD_RELOC_OFF 和 GD_RELOCADDR 
	//均在 u-boot-2014.04/include/generated/generic-asm-offsets.h 中定义
	//重定位过程还包括修改修正表(fixup tables)内容,使得重定位后也可以使用绝对寻址的方式运行一些函数
然后回到_main的重定位后的here,清零重定位后uboot的bss段
然后跳入board_init_r,至此内存布局内容已全部完成


uboot会把global_data结构变量的地址放在r9里,arch/arm/include/asm/global_data.h可见:
#define DECLARE_GLOBAL_DATA_PTR		register volatile gd_t *gd asm ("r9")



u-boot 为了生成位置无关码,在链接时指定了-pie 选项,这个选项在 arch/arm/config.mk 中指定:
# needed for relocation
LDFLAGS_u-boot += -pie
当使用-pie 选项后,链接器会生成一个修正表(fixup tables),在最终的二进制文件 u-boot.bin 中表现为多了 2 个段 .rel.dyn 和 .dynsym,
还需要在链接脚本文件中增加这 2 个段
u-boot 可以根据这 2 个段的信息
将重定位后的代码的链接地址修正为其运行地址,这样 u-boot 就可以重定位到任何地址。
然而在uboot自身重定位前,还是得要先在指定的位置执行!!
smart210.h以下宏说明了uboot一就开始要在Dram地址0x20000000执行,不然在一些需要绝对寻址的地方直接跑偏,
#define CONFIG_SYS_TEXT_BASE		0x20000000	/* modied by zjh */
误删前对重定位的分析非常详细,现在也只能挑重点说,日后再有机会补充


///////////////////关于终端显示
修改;include/configs/smart210.h
#define CONFIG_SYS_PROMPT		"SMART210 # "	//uboot 命令终端的显示标识
#define CONFIG_IDENT_STRING		" for SMART210"	//识别符,不知哪的

board/samsung/smdkv210/smdkv210.c 中的 checkboard 函数,修改为:
printf("Board:\tSMART210\n");


///////////////////内存布局过程中,要知道的smart210内存结构
修改;include/configs/smart210.h
/* SMART210 的内存结构内容 */
#define CONFIG_NR_DRAM_BANKS	1		//只有一块banks
#define PHYS_SDRAM_1		CONFIG_SYS_SDRAM_BASE	/* SDRAM Bank #1 dram从地址0x20000000开始*/
#define PHYS_SDRAM_1_SIZE	(512 << 20)	/* 0x20000000, 512 MB Bank #1 (modied by zjh) */


///////////////////关于终端的串口设置,我们用串口0
修改;include/configs/smart210.h
#define CONFIG_SERIAL0			1	/* use SERIAL 0 on SMDKC100 */

board/samsung/smdkv210/lowlevel_init.S 中添加代码
/* add by zjh */
ldr	r0, =0xE0200000		/* GPA0_CON */
ldr	r1, =0x22222222
str	r1, [r0]

///////////////////打印正确的cpu信息
arch/arm/cpu/armv7/s5p-common/cpu_info.c
int print_cpuinfo(void)
{......
	printf("CPU:\t%sV210@%sMHz\n", s5p_get_cpu_name(), strmhz(buf, get_arm_clk()));

arch/arm/cpu/armv7/s5pc1xx/clock.c
unsigned long get_arm_clk(void)
{
	/* modied by zjh */
	return s5pv210_get_arm_clk();
)
/* s5pv210: return ARM clock frequency (add by zjh) */
static unsigned long s5pv210_get_arm_clk(void)
{
	struct s5pv210_clock *clk =
		(struct s5pv210_clock *)samsung_get_base_clock();
	unsigned long div;
	unsigned long dout_apll, armclk;
	unsigned int apll_ratio;

	div = readl(&clk->div0);

	/* APLL_RATIO: [2:0] */
	apll_ratio = div & 0x7;

	dout_apll = get_pll_clk(APLL) / (apll_ratio + 1);
	armclk = dout_apll;

	return armclk;
}
unsigned long get_pll_clk(int pllreg)
{
	return s5pv210_get_pll_clk(pllreg);
}
/* s5pv210: return pll clock frequency(add by zjh) */
static unsigned long s5pv210_get_pll_clk(int pllreg)
{
	struct s5pv210_clock *clk =
		(struct s5pv210_clock *)samsung_get_base_clock();
	unsigned long r, m, p, s, mask, fout;
	unsigned int freq;

	switch (pllreg) {
	case APLL:
		r = readl(&clk->apll_con0);
		break;
	case MPLL:
		r = readl(&clk->mpll_con);
		break;
	case EPLL:
		r = readl(&clk->epll_con0);
		break;
	case VPLL:
		r = readl(&clk->vpll_con);
		break;
	default:
		printf("Unsupported PLL (%d)\n", pllreg);
		return 0;
	}

	/*
	 * APLL_CON0: MIDV [25:16]
	 * MPLL_CON:  MIDV [25:16]
	 * EPLL_CON0: MIDV [24:16]
	 * VPLL_CON:  MIDV [24:16]
	 */
	if (pllreg == APLL || pllreg == MPLL)
		mask = 0x3ff;
	else
		mask = 0x1ff;

	m = (r >> 16) & mask;

	/* PDIV [13:8] */
	p = (r >> 8) & 0x3f;
	/* SDIV [2:0] */
	s = r & 0x7;

	freq = CONFIG_SYS_CLK_FREQ_V210;
	if (pllreg == APLL) {
		if (s < 1)
			s = 1;
		/* FOUT = MDIV * FIN / (PDIV * 2^(SDIV - 1)) */
		fout = m * (freq / (p * (1 << (s - 1))));
	} else
		/* FOUT = MDIV * FIN / (PDIV * 2^SDIV) */
		fout = m * (freq / (p * (1 << s)));

	return fout;
}

编译后烧写uboot
sudo dd bs=512 iflag=dsync oflag=dsync if=u-boot.bin of=/dev/sdb seek=32



/******************************** uboot 命令补全 *****************************************/

修改;include/configs/smart210.h
#define CONFIG_CMDLINE_EDITING	/* add by zjh */
#define CONFIG_AUTO_COMPLETE	/* add by zjh */

编译安装后便可以
现在可以按 Tab 键自动补全命令了,同时可以按上下键查看历史命令。


/******************************** 移植网卡 DM9000 成功 *****************************************/
注意,我们的网卡的中断针口接的是XEINT7!!! 不过貌似uboot移植用不着

关于SROM控制器的说明也因为误删而丢失了,不过,重点记住
s5pv210 SROM 有6个板块(bank),每块映射的空间有128mb,然而只提供16针供地址使用,
当读写srom 对应的地址A时,srom控制器会自动输出片选信号,选出对应板块,以及与地址一致的16针地址信号,
然而16针地址信号只能与地址A的低16位一致,也就说只能用到128m里的低位的6.4mb,
而其他映射的地址会因为,低16位一致,而重复映射,
所以SROM 接入的不应该是大容量的储存芯片,而是一些功能类芯片.
还有偏选,读或写操作都是硬件自己操作,用户直接读写对应地址即可,即例如
	a = *((*int)0x8800234) //读操作
	*((*int)0x8800234) = b //写操作

DM9000A 有 2 个端口:DATA 和 INDEX(即地址)。DM9000A 的地址和数据线复用,由cmd针选择data线读写的是dm9000芯片里的地址还是数据

这里dm9000A 接入bank1,地址针2 接到cmd 
所以我们读写 s5pv210 的介于地址 0x88000000~0x8FFFFFFF 的地址时,只要地址2位是0时,dm9000便处于地址态
否则我们读写 s5pv210 的介于地址 0x88000000~0x8FFFFFFF 的地址时,只要地址2位是1时,dm9000便处于数据态

接口:
Xm0DATA[15:0]		SD[15:0]
Xm0ADDR2		CMD
XEINT7			INT
Xm0OEn			IOR#
Xm0WEn			IOW#
Xm0CSn1			CS#
XnRSTOUT		PWRST#
			X1,X2 (接25mhz晶振)

时序:
Tacs:地址发出后等多长时间发片选,DM9000A 中 CS 和 CMD(地址)同时发出,所以 Tacs=0ns
Tcos:发出片选信号后等多长时间发出读使能信号(nOW、IOR),在 DM9000A 的时序图上对应 T1,最小为 0,我们稍微设置大点 Tcos=5ns
Tacc:读使能信号持续时间,在 DM9000A 的时序图上对应 T2,我们设置为设置 Tacc=15ns
Tcoh:读使能信号结束后,片选信号保持时间,在 DM9000A 的时序图中对应 T5,所以可以设置
Tcoh=5ns
Tcah:片选结束后,地址保存时间,DM9000A 中片选和地址同时结束,所以 Tcah=0
Tacp:页模式,不管
PMC:页模式,不管

/////////////////配置
include/config_cmd_default.h
#define CONFIG_CMD_NET		/* bootp, tftpboot, rarpboot 启动网络,初始化dm9000要这个宏*/

include/configs/smart210.h
#include <config_cmd_default.h>
#ifdef CONFIG_CMD_NET
/* masked by zjh */
#if 0
#define CONFIG_SMC911X         1       /* we have a SMC9115 on-board   */
#define CONFIG_SMC911X_16_BIT  1       /* SMC911X_16_BIT Mode          */
#define CONFIG_SMC911X_BASE    0x98800300      /* SMC911X Drive Base   */
#endif
/* modied by zjh */
#define CONFIG_ENV_SROM_BANK   1       /* Select SROM Bank-1 for Ethernet*/
/* add by zjh */
#define CONFIG_DRIVER_DM9000
#define CONFIG_DM9000_NO_SROM
#define CONFIG_DM9000_BASE		0x88000000	//srom bank1 基地址
#define DM9000_IO				(CONFIG_DM9000_BASE)	//应对dm9000地址端时,要求的srom的地址
#define DM9000_DATA				(CONFIG_DM9000_BASE + 0x4)//应对dm9000数据端时,要求的srom的地址
									  //这里的 DM9000A_DATA 定义为基地址+0x4,
									  //刚好把 Xm0ADDR2 拉高,即把 CMD 拉高
#define CONFIG_CMD_PING
#define CONFIG_IPADDR			192.168.2.120
#define CONFIG_SERVERIP			192.168.2.227		//后来tftp的服务器地址
#define CONFIG_ETHADDR			1A:2A:3A:4A:5A:6A
#endif /* CONFIG_CMD_NET */

dm9000初始化有两个步骤:
先是初始化控制dm9000得 srom 控制器
board.c 中的 board_init_r	
	->board_init();	
		->board_init //在 board/samsung/smdkv210/smart210.c
			->dm9000_pre_init(void) 在 board/samsung/smdkv210/smart210.c	//初始化 srom 控制器
			//就是初始化srom与外接芯片的时序问题
然后通过srom初始化dm9000
board.c 中的 board_init_r	
	->eth_initialize //函数在 u-boot-2014.04/net/eth.c
		->board_eth_init //在 u-boot-2014.04/board/samsung/smdkv210/smart210.c	初始化ethernet 
			->dm9000_initialize //在 drivers/net/DM9000Ax.c

drivers/net/Makefile
obj-$(CONFIG_DRIVER_DM9000) += dm9000x.o

board/samsung/smdkv210/smart210.c
屏蔽smc9115_pre_init
static void dm9000_pre_init(void)
{
	u32 smc_bw_conf, smc_bc_conf;
	
	/* Ethernet needs bus width of 16 bits */
	smc_bw_conf = SMC_DATA16_WIDTH(CONFIG_ENV_SROM_BANK)
		| SMC_BYTE_ADDR_MODE(CONFIG_ENV_SROM_BANK);
	smc_bc_conf = SMC_BC_TACS(0) | SMC_BC_TCOS(1) | SMC_BC_TACC(2)
		| SMC_BC_TCOH(1) | SMC_BC_TAH(0) | SMC_BC_TACP(0) | SMC_BC_PMC(0);

	/* Select and configure the SROMC bank */
	s5p_config_sromc(CONFIG_ENV_SROM_BANK, smc_bw_conf, smc_bc_conf);
}
int board_init(void)
{
	/* masked by zjh */
	//smc9115_pre_init();
	dm9000_pre_init();
	gd->bd->bi_arch_number = MACH_TYPE_SMDKC100;
	gd->bd->bi_boot_params = PHYS_SDRAM_1 + 0x100;

	return 0;
}
int board_eth_init(bd_t *bis)
{
	int rc = 0;
#ifdef CONFIG_SMC911X
	rc = smc911x_initialize(0, CONFIG_SMC911X_BASE);
	/* add by zjh */
#elif defined(CONFIG_DRIVER_DM9000)
	rc = dm9000_initialize(bis);
#endif
	return rc;
}

drivers/net/DM9000Ax.c
int dm9000_initialize(bd_t *bis)
{
	struct eth_device *dev = &(dm9000_info.netdev);

	/* Load MAC address from EEPROM */
	dm9000_get_enetaddr(dev);

	dev->init = dm9000_init;
	dev->halt = dm9000_halt;
	dev->send = dm9000_send;
	dev->recv = dm9000_rx;
	sprintf(dev->name, "dm9000");

	eth_register(dev);

	return 0;
}

补充,如果我们想使用一些命令,可以查看include/config_cmd_all.h
知道uboot都支持那些命令,如果需要,拷对应宏到smart210.h里



/******************************** nand 成功 *****************************************/

s5pv210 通过nand硬件模块操作外部nand储存芯片
注意nandflash里的地址与s5pv210芯片的地址是不一样的,是相互独立的,nandflash地址并不映射到s5pv210的地址上去

include/configs/smart210.h
#undef CONFIG_CMD_NAND		//表示要使用nand与nand命令 相当于是否使用nand的总开关
#define CONFIG_SYS_MAX_NAND_DEVICE 	1		//只有一块nandflash储存芯片
#define CONFIG_SYS_NAND_BASE		0xB0E00000	//nand控制模块的寄存器基地址
#define CONFIG_NAND_S5PV210				//s5pv210的nand操作及初始化函数函数
/* add by zjh */
#define CONFIG_ENV_IS_IN_NAND		//注意环境变量与之前说的golbal_data不一样,
					//环境变量即是linux使用的参数(params),uboot启动时也会默认从nandflash读取,以被修改
					//假如读取失败会默认使用系统定义的某些宏为环境变量
					//global_data是uboot自身内部初始化和操作是使用的
					//环境变量将存在naandflash里
#define CONFIG_ENV_SIZE			(128 << 10)	/* 128KiB, 0x20000 */
#define CONFIG_ENV_ADDR			(256 << 10)	/* 256KiB, 0x40000 这时nanflash里的地址*/
#define CONFIG_ENV_OFFSET		(256 << 10)	/* 256KiB, 0x40000 */

common/Makefile
obj-$(CONFIG_ENV_IS_IN_NAND) += env_nand.o

drivers/mtd/nand/Makefile
obj-$(CONFIG_NAND_S5PV210) += s5pv210_nand.o

arch/arm/include/asm/arch-s5pc1xx/cpu.h
#define S5PV210_NAND_BASE	0xB0E00000
SAMSUNG_BASE(nand, NAND_BASE)

arch/arm/include/asm/arch-s5pc1xx/nand_reg.h
struct s5pv210_nand {
	u32	nfconf;
	u32	nfcont;
	u32	nfcmmd;
	u32	nfaddr;
	u32	nfdata;
	u32	nfmeccd0;
	u32	nfmeccd1;
	u32	nfseccd;
	u32 nfsblk;
	u32 nfeblk;
	u32	nfstat;
	u32 nfeccerr0;
	u32 nfeccerr1;
	u32 nfmecc0;
	u32 nfmecc1;
	u32 nfsecc;
	u32 nfmlcbitpt;
	u8 res0[0x1ffbc];
	u32 nfeccconf;
	u8 res1[0x1c];
	u32 nfecccont;
	u8 res2[0xc];
	u32 nfeccstat;
	u8 res3[0xc];
	u32 nfeccsecstat;
	u8 res4[0x4c];
	u32 nfeccprgecc0;
	u32 nfeccprgecc1;
	u32 nfeccprgecc2;
	u32 nfeccprgecc3;
	u32 nfeccprgecc4;
	u32 nfeccprgecc5;
	u32 nfeccprgecc6;
	u8 res5[0x14];
	u32 nfeccerl0;
	u32 nfeccerl1;
	u32 nfeccerl2;
	u32 nfeccerl3;
	u32 nfeccerl4;
	u32 nfeccerl5;
	u32 nfeccerl6;
	u32 nfeccerl7;
	u8 res6[0x10];
	u32 nfeccerp0;
	u32 nfeccerp1;
	u32 nfeccerp2;
	u32 nfeccerp3;
	u8 res7[0x10];
	u32 nfeccconecc0;
	u32 nfeccconecc1;
	u32 nfeccconecc2;
	u32 nfeccconecc3;
	u32 nfeccconecc4;
	u32 nfeccconecc5;
	u32 nfeccconecc6;
};

添加 drivers/mtd/nand/s5pv210_nand.c	//详细内容见文件
#include <asm/arch/nand_reg.h>		//要使用nand_reg.h里的寄存器结构

调试:
编译后储存下环境变量试试
setenv bootargs = "console=ttyPS0,115200n8 root=/dev/nfs rw nfsroot=192.168.0.210:/nfsboot/rootfs ip=192.168.0.230:192.168.0.210:192.168.0.1:255.255.255.0::eth0:off";
分别解释如下：
console ：指定控制台的设备以及波特率
root=/dev/nfs：制定/dev/nfs设备为根文件系统
rw: rw参数表示内核以读写方式加载根文件系统。
 ro参数表示内核以只读方式加载根文件系统，以便进行文件系统完整性检查，比如运行fsck；
nfsroot=192.168.0.210:/nfsboot/rootfs：nfs根文件系统的目录：192.168.0.210服务器上的/nfsboot/rootfs目录
ip=192.168.0.230:192.168.0.210:192.168.0.1:255.255.255.0::eth0:off";：ip的值为：开发板IP：主机服务器IP：网关：子网掩码：开发板用到的网卡：不使用自动配置
saveenv
关机后重启,发现之前设置的bootargs在


/******************************** nand 分区 *****************************************/

uboot关于分区的设置:

include/configs/smart210.h
#define CONFIG_MTD_DEVICE
#define CONFIG_MTD_PARTITIONS
/* modied by zjh */
#define MTDIDS_DEFAULT		"nand0=s5p-nand"
#define MTDPARTS_DEFAULT	"mtdparts=s5p-nand:256k(bootloader)"\
				",128k@0x40000(params)"\
				",2m@0x60000(log)"\
				",3m@0x260000(kernel)"\
				",-(rootfs)"
mtdparts default	//命令会按MTDPARTS_DEFAULT分区
saveenv
mtdparts	//查看分区


/******************************** nand ecc 成功 *****************************************/

smart210 接的 nand flash 是slc架构,页大小2kb,然而只是页的主区域(main area),然而每个页还有额外的 64 bytes 的spare area 用来储存ecc码

所谓8bit ecc:
当启用ecc时
经对相关寄存器设定,s5pv210每向nandflash进行页读写2kb内容时,每读写 512 bytes时会生成 13个 8位ecc码.
页写操作时,会把最后生成的共 52个8bit ecc码存到对应的寄存器,然后用户把他们 写到页的spare area 对应位置 (也称为 ENCODING )
spare area 又叫 OOD区,ood区前12bytes另作用途,52个ecc码放到ood的前12bytes之后的位置
页读操作时,每读512bytes数据时,要立即转到odd区读对应的 13个8bit ecc码,而不是继续读下一个512bytes数据,  (也称为 DECODING )
这时,芯片会自动校对数据错误,并把出错的地方生成策略存到对应的寄存器,然后再继续读下一个512bytes数据,
累计读完一页后,我们便可以查看对应存储错误策略的寄存器,如果有错可以尝试纠正错误的数据,
但如果错误太严重,存储错误策略的寄存器会给出无法纠错的提示.

注意,还未从代码里分析出启动或者关闭ecc时,nandflash的读写操作函数具体是哪个.


include/configs/smart210.h
#define CONFIG_S5PV210_NAND_HWECC		//启用ecc功能
#define	CONFIG_SYS_NAND_ECCSIZE		512	//每读写512bytes生13个8bit ecc码
#define CONFIG_SYS_NAND_ECCBYTES	13	//13个ecc码

drivers/mtd/nand/s5pv210_nand.c
#ifdef CONFIG_S5PV210_NAND_HWECC
	nand->ecc.hwctl = s5pv210_nand_enable_hwecc;
	nand->ecc.calculate = s5pv210_nand_calculate_ecc;
	nand->ecc.correct = s5pv210_nand_correct_data;
	nand->ecc.mode = NAND_ECC_HW;
	nand->ecc.size = CONFIG_SYS_NAND_ECCSIZE;
	nand->ecc.bytes = CONFIG_SYS_NAND_ECCBYTES;
	nand->ecc.strength = 1;
	/* add by zjh */
	nand->ecc.layout = &nand_oob_64;
	nand->ecc.read_page = s5pv210_nand_read_page_hwecc;	//s5pv210 的 ecc 硬件读函数
#else
	nand->ecc.mode = NAND_ECC_SOFT;
#endif
/* add by zjh */
static struct nand_ecclayout nand_oob_64 = {
	.eccbytes = 52,		/* 2048 / 512 * 13 */
	.eccpos = {	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
				22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 
				42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
				52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
				62, 63},
	/* 0和1用于保存坏块标记，12~63保存ecc，剩余2~11为free */
	.oobfree = {
			{.offset = 2,
			.length = 10}
		}
};
#ifdef CONFIG_S5PV210_NAND_HWECC
void s5pv210_nand_enable_hwecc(struct mtd_info *mtd, int mode)
{
	struct s5pv210_nand *nand = (struct s5pv210_nand *)samsung_get_base_nand();
	debug("s5pv210_nand_enable_hwecc(%p, %d)\n", mtd, mode);
	
	writel(readl(&nand->nfconf) | (0x3 << 23), &nand->nfconf);
	
	if (mode == NAND_ECC_READ)
	{
	}
	else if (mode == NAND_ECC_WRITE)
	{
		/* set 8/12/16bit Ecc direction to Encoding */
		writel(readl(&nand->nfecccont) | (0x1 << 16), &nand->nfecccont);
		/* clear 8/12/16bit ecc encode done */
		writel(readl(&nand->nfeccstat) | (0x1 << 25), &nand->nfeccstat);
	}
	
	/* Initialize main area ECC decoder/encoder */
	writel(readl(&nand->nfcont) | (0x1 << 5), &nand->nfcont);
	
	/* The ECC message size(For 512-byte message, you should set 511)
	* 8-bit ECC/512B */
	writel((511 << 16) | 0x3, &nand->nfeccconf);
	
	writel(readl(&nand->nfstat) | (0x1 << 4) | (0x1 << 5), &nand->nfstat);
	
	/* Initialize main area ECC decoder/ encoder */
	writel(readl(&nand->nfecccont) | (0x1 << 2), &nand->nfecccont);
	
	/* Unlock Main area ECC   */
	writel(readl(&nand->nfcont) & ~(0x1 << 7), &nand->nfcont);
}

/* modied by zjh */
static int s5pv210_nand_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
				      u_char *ecc_code)
{
	struct s5pv210_nand *nand = (struct s5pv210_nand *)samsung_get_base_nand();
	u32 nfeccprgecc0 = 0, nfeccprgecc1 = 0, nfeccprgecc2 = 0, nfeccprgecc3 = 0;

	/* Lock Main area ECC */
	writel(readl(&nand->nfcont) | (1 << 7), &nand->nfcont);
	
	/* 读取13 Byte的Ecc Code */
	nfeccprgecc0 = readl(&nand->nfeccprgecc0);
	nfeccprgecc1 = readl(&nand->nfeccprgecc1);
	nfeccprgecc2 = readl(&nand->nfeccprgecc2);
	nfeccprgecc3 = readl(&nand->nfeccprgecc3);

	ecc_code[0] = nfeccprgecc0 & 0xff;
	ecc_code[1] = (nfeccprgecc0 >> 8) & 0xff;
	ecc_code[2] = (nfeccprgecc0 >> 16) & 0xff;
	ecc_code[3] = (nfeccprgecc0 >> 24) & 0xff;
	ecc_code[4] = nfeccprgecc1 & 0xff;
	ecc_code[5] = (nfeccprgecc1 >> 8) & 0xff;
	ecc_code[6] = (nfeccprgecc1 >> 16) & 0xff;
	ecc_code[7] = (nfeccprgecc1 >> 24) & 0xff;
	ecc_code[8] = nfeccprgecc2 & 0xff;
	ecc_code[9] = (nfeccprgecc2 >> 8) & 0xff;
	ecc_code[10] = (nfeccprgecc2 >> 16) & 0xff;
	ecc_code[11] = (nfeccprgecc2 >> 24) & 0xff;
	ecc_code[12] = nfeccprgecc3 & 0xff;
	
	debug("s5pv210_nand_calculate_hwecc(%p,):\n"
		"0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\n"
		"0x%02x 0x%02x 0x%02x\n", mtd , ecc_code[0], ecc_code[1], ecc_code[2], 
		ecc_code[3], ecc_code[4], ecc_code[5], ecc_code[6], ecc_code[7], 
		ecc_code[8], ecc_code[9], ecc_code[10], ecc_code[11], ecc_code[12]);

	return 0;
}
/* add by zjh */
#define NF8_ReadPage_Adv(a,b,c) (((int(*)(u32, u32, u8*))(*((u32 *)0xD0037F90)))(a,b,c))
static int s5pv210_nand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int oob_required, int page)
{
	/* TQ210使用的NAND FLASH一个块64页 */
	return NF8_ReadPage_Adv(page / 64, page % 64, buf);
}

static int s5pv210_nand_correct_data(struct mtd_info *mtd, u_char *dat,
				     u_char *read_ecc, u_char *calc_ecc)
{
	if (read_ecc[0] == calc_ecc[0] &&
	    read_ecc[1] == calc_ecc[1] &&
	    read_ecc[2] == calc_ecc[2])
		return 0;

	printf("s5pv210_nand_correct_data: not implemented\n");
	return -1;
}
#endif


/******************************** nand flash 启动 成功 *****************************************/
我们修改 board/samsung/smart210/smart210.c 中的 copy_bl2_to_ram 函数,在这个函数中首先判断
当前是从 SD 卡启动还是从 NAND 启动,如果是从 NAND 启动则进行 NAND 初始化,然后从 NAND 拷贝
BL2 到 DDR 内存
我们通过读取 OMR 寄存器来判断 S5PV210 当前是从哪个设备启动的。参考手册 Table 6-3,手册上
并没有说 OM 寄存器的地址,我是参考的三星原厂的 u-boot 代码。

在board/samsung/smart210/smart210.c
void copy_bl2_to_ram(void)
{
/*
** ch:  通道
** sb:  起始块
** bs:  块大小
** dst: 目的地
** i: 	是否初始化
*/
#define CopySDMMCtoMem(ch, sb, bs, dst, i) \
	(((u8(*)(int, u32, unsigned short, u32*, u8))\
	(*((u32 *)0xD0037F98)))(ch, sb, bs, dst, i))
	
#define MP0_1CON  (*(volatile u32 *)0xE02002E0)
#define	MP0_3CON  (*(volatile u32 *)0xE0200320)
#define	MP0_6CON  (*(volatile u32 *)0xE0200380)	

#define NF8_ReadPage_Adv(a,b,c) (((int(*)(u32, u32, u8*))(*((u32 *)0xD0037F90)))(a,b,c))
	
	u32 bl2Size = 250 * 1024;	// 250K
	
	u32 OM = *(volatile u32 *)(0xE0000004);	// OM Register
	OM &= 0x1F;					// 取低5位
	
	if (OM == 0x2)				// NAND 2 KB, 5cycle 8-bit ECC
	{
#if 1
		u32 cfg = 0;
		struct s5pv210_nand *nand_reg = (struct s5pv210_nand *)(struct s5pv210_nand *)samsung_get_base_nand();
		
		/* initialize hardware */
		/* HCLK_PSYS=133MHz(7.5ns) */
		cfg =	(0x1 << 23) |	/* Disable 1-bit and 4-bit ECC */
				/* 下面3个时间参数稍微比计算出的值大些（我这里依次加1），否则读写不稳定 */
				(0x3 << 12) |	/* 7.5ns * 2 > 12ns tALS tCLS */
				(0x2 << 8) | 	/* (1+1) * 7.5ns > 12ns (tWP) */
				(0x1 << 4) | 	/* (0+1) * 7.5 > 5ns (tCLH/tALH) */
				(0x0 << 3) | 	/* SLC NAND Flash */
				(0x0 << 2) |	/* 2KBytes/Page */
				(0x1 << 1);		/* 5 address cycle */
	
		writel(cfg, &nand_reg->nfconf);
		
		writel((0x1 << 1) | (0x1 << 0), &nand_reg->nfcont);
		/* Disable chip select and Enable NAND Flash Controller */
	
		/* Config GPIO */
		MP0_1CON &= ~(0xFFFF << 8);
		MP0_1CON |= (0x3333 << 8);
		MP0_3CON = 0x22222222;
		MP0_6CON = 0x22222222;		
		
		int i = 0;
		int pages = bl2Size / 2048;		// 多少页
		int offset = 0x4000 / 2048;			// u-boot.bin在NAND中的偏移地址(页地址)
		u8 *p = (u8 *)CONFIG_SYS_SDRAM_BASE;
		for (; i < pages; i++, p += 2048, offset += 1)
			NF8_ReadPage_Adv(offset / 64, offset % 64, p);
#endif
	}
	else if (OM == 0xC)		// SD/MMC
	{
		u32 V210_SDMMC_BASE = *(volatile u32 *)(0xD0037488);	// V210_SDMMC_BASE
		u8 ch = 0;
		
		/* 参考S5PV210手册7.9.1 SD/MMC REGISTER MAP */
		if (V210_SDMMC_BASE == 0xEB000000)		// 通道0
			ch = 0;
		else if (V210_SDMMC_BASE == 0xEB200000)	// 通道2
			ch = 2;
		CopySDMMCtoMem(ch, 32, bl2Size / 512, (u32 *)CONFIG_SYS_SDRAM_BASE, 0);
	}
}	

调试:
SMART210 # tftp 20000000 smart210-spl.bin
SMART210 # nand write 20000000 0 $filesize		//写到0地址的地方
SMART210 # tftp 20000000 u-boot.bin       
SMART210 # nand write 20000000 4000 $filesize		//写到16kb,即0x4000地址的地方


/******************************** nand flash 合并(combine) 并启动 成功 *****************************************/

合并 smdkv210-spl.bin 和 u-boot.bin 为一个文件:
我们可以将上面合并单文件的那一系列命令写入 主目录Makefile,这样比较方便。
首先在 ALL 中添加一个目标 combine
# combine add by zjh
ALL-y += u-boot.srec u-boot.bin System.map combine
all:		$(ALL-y)
#add by zjh
combine: u-boot.bin spl/u-boot-spl.bin FORCE
	cp $(objtree)/spl/smart210-spl.bin $(objtree)/tmp.bin
	truncate $(objtree)/tmp.bin -c -s 16K
	cat $(objtree)/u-boot.bin >> $(objtree)/tmp.bin
	cp $(objtree)/tmp.bin $(objtree)/u-boot-combine.bin
	cp $(objtree)/u-boot-combine.bin /tftpboot/

调试:
SMART210 # nand erase.part bootloader
SMART210 # tftp 20000000 u-boot-combine.bin
SMART210 # nand write 20000000 bootloader $filesize


/******************************** 添加启动菜单 成功 *****************************************/

include/configs/smart210.h
/* add by zjh, for bootmenu */
#define CONFIG_CMD_BOOTMENU
#define CONFIG_MENU
#define CONFIG_AUTOBOOT_KEYED
#define CONFIG_MENU_SHOW
#define CONFIG_BOOTDELAY	3	//菜单显示的时间

使用 setenv 添加菜单的格式为
bootmenu_<num> "<title>=<commands>"
<num> 菜单编号,从 0 开始
<title> 菜单标题
<commands> 当一个菜单被选中后要执行的命令
标题和命令以第一个“=”为分界点
延迟结束后 u-boot 立即执行第一个菜单的命令
按上下键来选择菜单,被选中的菜单以高亮显示,按回车键执行被选中的菜单的命令
按 Esc 键或者 Q 键退出延迟计数,一直显示菜单,直到用户选择某个菜单执行
将所有命令写在一行命令之间使用“;”隔开

调试:
setenv bootmenu_0 "start0=tftp 20000000 uImage; bootm"  //要求菜单项执行多条命令,除了";"分割,还一定要加 "" 来包括整段命令内容!!
							//只加;号的话,会误认为;前后是两条独立的命令!!!!
setenv bootmenu_1 test=echo $filesize
save		//然后命令参数便存入了环境变量里,存到nandflash里
重启uboot后会在菜单出现start和test两项,选择后执行相关内容.
所以,环境变量除了供linux使用外,还为uboot自身服务









